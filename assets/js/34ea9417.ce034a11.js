"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2584],{3905:(e,r,n)=>{n.d(r,{Zo:()=>s,kt:()=>u});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function g(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?g(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},g=Object.keys(e);for(t=0;t<g.length;t++)n=g[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var g=Object.getOwnPropertySymbols(e);for(t=0;t<g.length;t++)n=g[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),m=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},s=function(e){var r=m(e.components);return t.createElement(i.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,g=e.originalType,i=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=m(n),u=o,f=p["".concat(i,".").concat(u)]||p[u]||c[u]||g;return n?t.createElement(f,l(l({ref:r},s),{},{components:n})):t.createElement(f,l({ref:r},s))}));function u(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var g=n.length,l=new Array(g);l[0]=p;var a={};for(var i in r)hasOwnProperty.call(r,i)&&(a[i]=r[i]);a.originalType=e,a.mdxType="string"==typeof e?e:o,l[1]=a;for(var m=2;m<g;m++)l[m]=n[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1546:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>g,metadata:()=>a,toc:()=>m});var t=n(7462),o=(n(7294),n(3905));const g={},l="Logging - Python",a={unversionedId:"Programming/Python/Logging",id:"Programming/Python/Logging",title:"Logging - Python",description:"How To",source:"@site/docs/Programming/Python/Logging.md",sourceDirName:"Programming/Python",slug:"/Programming/Python/Logging",permalink:"/note/Programming/Python/Logging",draft:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/Python/Logging.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"Python",permalink:"/note/Programming/Python/"},next:{title:"Thread",permalink:"/note/Programming/Python/Thread"}},i={},m=[{value:"Color Logging",id:"color-logging",level:2}],s={toc:m};function c(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},s,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logging---python"},"Logging - Python"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/howto/logging.html"},"How To"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import logging\n\nLOG_FILE = "/var/log/python.log"\n\n# get a module-level logger\nlogger = logging.getLogger(__name__)\n\n# get the root logger\nlogger = logging.getLogger()\n\n# specifies the lowest-severity the logger will handle\n# DEBUG < INFO < WARNING < ERROR < CRITICAL\nlogger.setLevel(logging.DEBUG)\n\n# output log to console\nhandler = logging.StreamHandler()\nhandler.setFormatter(logging.Formatter("%(message)s"))\nlogger.addHandler(handler)\n\n# output log to file\nhandler = logging.FileHandler(LOG_FILE)\nhandler.setFormatter(logging.Formatter("%(asctime)s %(message)s"))\nlogger.addHandler(handler)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import logging\n\nlogger = logging.getLogger()\n\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n")),(0,o.kt)("h2",{id:"color-logging"},"Color Logging"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/56944256"},"Reference"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ColorFormatter.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import logging\n\nclass ColorFormatter(logging.Formatter):\n    """Color logging.Formatter"""\n\n    COLORS = {\n        # Blue\n        logging.INFO: "\\033[34m",\n        # Yellow\n        logging.WARNING: "\\033[33m",\n        # Red\n        logging.ERROR: "\\033[31m",\n        # Red\n        logging.CRITICAL: "\\033[31m",\n    }\n    RESET = "\\033[0m"\n\n    def __init__(self, fmt=None, *args, **kwargs):\n        super().__init__(fmt, *args, **kwargs)\n        self.formatters = {}\n        # Create formatters for each level\n        for level, color in self.COLORS.items():\n            self.formatters[level] = logging.Formatter(\n                "{}{}{}".format(color, fmt, self.RESET),\n                *args,\n                **kwargs\n            )\n\n    def format(self, record):\n        if record.levelno in self.formatters:\n            return self.formatters[record.levelno].format(record)\n        return super().format(record)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import logging\nfrom ColorFormatter import ColorFormatter\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\nhandler = logging.StreamHandler()\nhandler.setFormatter(ColorFormatter("%(message)s"))\nlogger.addHandler(handler)\n')))}c.isMDXComponent=!0}}]);