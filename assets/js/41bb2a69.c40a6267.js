"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3933],{634:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=r(75366),s=r(26192);const i={},l="DLL",o={id:"Programming/C-Sharp/DLL",title:"DLL",description:"Reference .NET DLL",source:"@site/docs/Programming/C-Sharp/DLL.md",sourceDirName:"Programming/C-Sharp",slug:"/Programming/C-Sharp/DLL",permalink:"/note/Programming/C-Sharp/DLL",draft:!1,unlisted:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/C-Sharp/DLL.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"Async / Task",permalink:"/note/Programming/C-Sharp/Async"},next:{title:"Delegate",permalink:"/note/Programming/C-Sharp/Delegate"}},a={},c=[{value:"Reference .NET DLL",id:"reference-net-dll",level:2},{value:"Call native unmanaged DLL",id:"call-native-unmanaged-dll",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"dll",children:"DLL"}),"\n",(0,t.jsx)(n.h2,{id:"reference-net-dll",children:"Reference .NET DLL"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.a,{href:"https://steamworks.github.io/installation/",children:"Steamworks.NET"})," reference"]}),"\n",(0,t.jsxs)(n.p,{children:["Edit ",(0,t.jsx)(n.code,{children:".csproj"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n  <ItemGroup>\n    <Reference Include="Steamworks.NET">\n      <HintPath>Steamworks.NET.dll</HintPath>\n      <SpecificVersion>False</SpecificVersion> \n      \x3c!-- Copy DLL to Output folder --\x3e\n      <Private>True</Private>\n    </Reference>\n  </ItemGroup>\n</Project>\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Copy ",(0,t.jsx)(n.code,{children:"Steamworks.NET.dll"})," file to ",(0,t.jsx)(n.code,{children:"root"})," folder"]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"dotnet restore [<project.csproj>]"})]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"dotnet run"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"call-native-unmanaged-dll",children:"Call native unmanaged DLL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.Runtime.InteropServices;\n\n[DllImport("user32.dll", CharSet = CharSet.Unicode)]\nstatic extern int MessageBox(IntPtr hWnd, String text, String caption, uint type);\n\nMessageBox(new IntPtr(0), "Hello World!", "Hello Dialog", 0);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"ref"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.Runtime.InteropServices;\nusing System.Runtime.CompilerServices;\n\n[DllImport("user32.dll", CharSet = CharSet.Unicode)]\nstatic extern int MessageBox(ref int hWnd, String text, String caption, uint type);\n\nMessageBox(ref Unsafe.NullRef<int>(), "Hello World!", "Hello Dialog", 0);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Copy DLL to output folder"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Project Sdk="Microsoft.NET.Sdk">\n  <Target Name="CopyFiles" AfterTargets="AfterBuild">\n    <ItemGroup>\n      <DllFiles Include="*.dll" />\n    </ItemGroup>\n    <Copy SourceFiles="@(DllFiles)" DestinationFolder="$(OutDir)" />\n  </Target>\n</Project>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},26192:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>l});var t=r(97049);const s={},i=t.createContext(s);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);