"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[652],{7485:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>m});var n=t(6687);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},$={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(p,".").concat(m)]||u[m]||$[m]||o;return t?n.createElement(f,i(i({ref:r},l),{},{components:t})):n.createElement(f,i({ref:r},l))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6345:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>$,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(6274),a=(t(6687),t(7485));const o={},i="LDAP sort",s={unversionedId:"Programming/PHP/LDAP-Sort",id:"Programming/PHP/LDAP-Sort",title:"LDAP sort",description:"PHP ldap_sort() is deprecated, this is pure PHP implement",source:"@site/docs/Programming/PHP/LDAP-Sort.md",sourceDirName:"Programming/PHP",slug:"/Programming/PHP/LDAP-Sort",permalink:"/note/Programming/PHP/LDAP-Sort",draft:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/PHP/LDAP-Sort.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"Programming",permalink:"/note/Programming/"}},p={},c=[],l={toc:c};function $(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ldap-sort"},"LDAP sort"),(0,a.kt)("p",null,"PHP ",(0,a.kt)("inlineCode",{parentName:"p"},"ldap_sort()")," is deprecated, this is pure PHP implement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// because PHP usort() cannot iterate using $array['count'], so need implement this quicksort()\nfunction quickSort(&$array, $compare, $start, $end)\n{\n    $partition = function (&$array, $start, $end) use (&$partition, $compare) {\n        if ($start >= $end) {\n            return;\n        }\n        $pivot = $array[$start];\n        $left = $start;\n        $right = $end;\n        while ($left <= $right) {\n            while ($compare($array[$left], $pivot) < 0) {\n                $left += 1;\n            }\n            while ($compare($array[$right], $pivot) > 0) {\n                $right -= 1;\n            }\n            if ($left > $right) {\n                break;\n            }\n            list($array[$left], $array[$right]) = [$array[$right], $array[$left]];\n            $left += 1;\n            $right -= 1;\n        }\n        $partition($array, $start, $right);\n        $partition($array, $left, $end);\n    };\n\n    $partition($array, $start, $end);\n}\n\n\nfunction ldapSort(array &$entries, $key)\n{\n    $SORT_KEY = 'SortValue';\n\n    $key = strtolower($key);\n\n    for ($i = 0; $i < $entries['count']; $i++) {\n        $entry = &$entries[$i];\n        $attributes = array_change_key_case($entry, CASE_LOWER);\n\n        $entry[$SORT_KEY] = isset($attributes[$key][0]) ?\n            $attributes[$key][0] : null;\n    }\n    unset($entry);\n\n    quickSort(\n        $entries,\n        function ($a, $b) use ($SORT_KEY) {\n            $a = $a[$SORT_KEY];\n            $b = $b[$SORT_KEY];\n            if ($a == $b) {\n                return 0;\n            }\n            return ($a < $b) ? -1 : 1;\n        },\n        0, // start\n        $entries['count'] - 1 // end\n    );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"$entries = ldap_get_entries($ldap, $result);\nldapSort($entries, 'displayname');\n")))}$.isMDXComponent=!0}}]);