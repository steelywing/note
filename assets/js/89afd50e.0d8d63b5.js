"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5072],{93820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(75366),r=t(26192);const l={},i="Delegate",s={id:"Programming/C-Sharp/Delegate",title:"Delegate",description:"A delegate is a type that represents references to methods with a particular parameter list and return type.",source:"@site/docs/Programming/C-Sharp/Delegate.md",sourceDirName:"Programming/C-Sharp",slug:"/Programming/C-Sharp/Delegate",permalink:"/note/Programming/C-Sharp/Delegate",draft:!1,unlisted:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/C-Sharp/Delegate.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"DLL",permalink:"/note/Programming/C-Sharp/DLL"},next:{title:"Generic",permalink:"/note/Programming/C-Sharp/Generic"}},o={},c=[{value:"Lambda / Anonymous",id:"lambda--anonymous",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"delegate",children:"Delegate"}),"\n",(0,a.jsx)(n.p,{children:"A delegate is a type that represents references to methods with a particular parameter list and return type."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"class Program\n{\n    // Declaration\n    public delegate int DelegateMethod(ref int x);\n\n    public static int Add1(ref int x)\n    {\n        x += 1;\n        return x;\n    }\n\n    public static int Multiple2(ref int x)\n    {\n        x *= 2;\n        return x;\n    }\n\n    static void Main(string[] args)\n    {\n        DelegateMethod calculate;\n        int x;\n\n        x = 1;\n        calculate = Add1;\n        calculate?.Invoke(ref x); // 1 + 1 = 2\n        Console.WriteLine(x); // 2\n\n        x = 1;\n        calculate += Multiple2; // Add other method\n        calculate?.Invoke(ref x); // (1 + 1) * 2 = 4\n        Console.WriteLine(x); // 4\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If the delegate has a return value and/or out parameters, it returns the return value and parameters of the last method invoked"}),"\n",(0,a.jsx)(n.li,{children:"Delegate can bind to instance"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'class Counter\n{\n    public int count = 0;\n\n    public void Add()\n    {\n        count += 1;\n    }\n}\n\nclass Program\n{\n\n    // Declaration\n    public delegate void DelegateMethod();\n\n    static void Main(string[] args)\n    {\n        var a = new Counter();\n        var b = new Counter();\n\n        // Delegate does not need initialize, can be null\n        DelegateMethod method = null;\n\n        method = a.Add;\n        // method += a.Add;\n        // += can be use even delegate is null\n\n        // Use ?.Invoke() will check if delegate is null, call null delegate() will throw error\n        method?.Invoke();\n        Console.WriteLine(a.count); // 1\n\n        method += b.Add;\n        method?.Invoke();\n        Console.WriteLine($"{a.count} {b.count}"); // 2 1\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Anonymous"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"var delegateFunction = delegate()\n{\n    // ...\n    // return ...;\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"C# defined delegate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"public delegate void Action();\npublic delegate void Action<in T>(T obj);\n// ...\n\npublic delegate TResult Func<out TResult>();\npublic delegate TResult Func<in T, out TResult>(T arg);\n// ...\n"})}),"\n",(0,a.jsx)(n.h2,{id:"lambda--anonymous",children:"Lambda / Anonymous"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions",children:"Lambda expression"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With return value"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"Func<int, int> Add1 = (n) => n + 1;\n// same as\nFunc<int, int> Add1 = (n) => { return n + 1; };\n"})}),"\n",(0,a.jsx)(n.p,{children:"Without return value"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'Action<string> Hi = (name) =>\n{\n    Console.WriteLine($"Hi, {name}");\n};\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Lambda is closure, that can access outer scope"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:"int x = 1;\nvar doubleX = () =>\n{\n    return x * 2;\n};\nConsole.WriteLine(doubleX());\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},26192:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(97049);const r={},l=a.createContext(r);function i(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);