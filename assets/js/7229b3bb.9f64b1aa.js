"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[652],{12948:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>$,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=e(75366),a=e(26192);const i={},s="LDAP sort",o={id:"Programming/PHP/LDAP-Sort",title:"LDAP sort",description:"PHP ldap_sort() is deprecated, this is pure PHP implement",source:"@site/docs/Programming/PHP/LDAP-Sort.md",sourceDirName:"Programming/PHP",slug:"/Programming/PHP/LDAP-Sort",permalink:"/note/Programming/PHP/LDAP-Sort",draft:!1,unlisted:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/PHP/LDAP-Sort.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"PHP issue",permalink:"/note/Programming/PHP/Issue"},next:{title:"Upload file",permalink:"/note/Programming/PHP/UploadFile"}},$={},c=[];function l(n){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"ldap-sort",children:"LDAP sort"}),"\n",(0,r.jsxs)(t.p,{children:["PHP ",(0,r.jsx)(t.code,{children:"ldap_sort()"})," is deprecated, this is pure PHP implement"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"// because PHP usort() cannot iterate using $array['count'], so need implement this quicksort()\nfunction quickSort(&$array, $compare, $start, $end)\n{\n    $partition = function (&$array, $start, $end) use (&$partition, $compare) {\n        if ($start >= $end) {\n            return;\n        }\n        $pivot = $array[$start];\n        $left = $start;\n        $right = $end;\n        while ($left <= $right) {\n            while ($compare($array[$left], $pivot) < 0) {\n                $left += 1;\n            }\n            while ($compare($array[$right], $pivot) > 0) {\n                $right -= 1;\n            }\n            if ($left > $right) {\n                break;\n            }\n            list($array[$left], $array[$right]) = [$array[$right], $array[$left]];\n            $left += 1;\n            $right -= 1;\n        }\n        $partition($array, $start, $right);\n        $partition($array, $left, $end);\n    };\n\n    $partition($array, $start, $end);\n}\n\n\nfunction ldapSort(array &$entries, $key)\n{\n    $SORT_KEY = 'SortValue';\n\n    $key = strtolower($key);\n\n    for ($i = 0; $i < $entries['count']; $i++) {\n        $entry = &$entries[$i];\n        $attributes = array_change_key_case($entry, CASE_LOWER);\n\n        $entry[$SORT_KEY] = isset($attributes[$key][0]) ?\n            $attributes[$key][0] : null;\n    }\n    unset($entry);\n\n    quickSort(\n        $entries,\n        function ($a, $b) use ($SORT_KEY) {\n            $a = $a[$SORT_KEY];\n            $b = $b[$SORT_KEY];\n            if ($a == $b) {\n                return 0;\n            }\n            return ($a < $b) ? -1 : 1;\n        },\n        0, // start\n        $entries['count'] - 1 // end\n    );\n}\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"$entries = ldap_get_entries($ldap, $result);\nldapSort($entries, 'displayname');\n"})})]})}function u(n={}){const{wrapper:t}={...(0,a.a)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},26192:(n,t,e)=>{e.d(t,{Z:()=>o,a:()=>s});var r=e(97049);const a={},i=r.createContext(a);function s(n){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function o(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),r.createElement(i.Provider,{value:t},n.children)}}}]);