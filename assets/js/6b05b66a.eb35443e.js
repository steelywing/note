"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3189],{7485:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(6687);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(6274),a=(t(6687),t(7485));const i={},o="CSR (Certificate Signing Request)",s={unversionedId:"Note/OpenSSL/CSR",id:"Note/OpenSSL/CSR",title:"CSR (Certificate Signing Request)",description:"- Reference",source:"@site/docs/Note/OpenSSL/CSR.md",sourceDirName:"Note/OpenSSL",slug:"/Note/OpenSSL/CSR",permalink:"/note/Note/OpenSSL/CSR",draft:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Note/OpenSSL/CSR.md",tags:[],version:"current",frontMatter:{},sidebar:"note",previous:{title:"CA",permalink:"/note/Note/OpenSSL/CA"},next:{title:"OpenSSL Key",permalink:"/note/Note/OpenSSL/Key"}},c={},l=[{value:"<code>&lt;key option&gt;</code>",id:"key-option",level:2},{value:"<code>&lt;subject options&gt;</code>",id:"subject-options",level:2},{value:"Creating CSR",id:"creating-csr",level:2},{value:"Self signed certificate",id:"self-signed-certificate",level:2},{value:"CSR configuration file",id:"csr-configuration-file",level:2},{value:"Generate CSR from an existing certificate",id:"generate-csr-from-an-existing-certificate",level:2},{value:"Verify CSR signature",id:"verify-csr-signature",level:2}],p={toc:l};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"csr-certificate-signing-request"},"CSR (Certificate Signing Request)"),(0,a.kt)("blockquote",null,(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.digicert.com/ssl-support/openssl-quick-reference-guide.htm"},"Reference")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/man1/openssl-req.html"},"openssl req")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc2986"},"RFC 2986")))),(0,a.kt)("h2",{id:"key-option"},(0,a.kt)("inlineCode",{parentName:"h2"},"<key option>")),(0,a.kt)("p",null,"Create new key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Create new private key, bits = 2048 / 4096\n-newkey rsa[:<bits>]\n# Don't encrypt private key (no password)\n[-nodes]\n# The new created private key file\n[-keyout <key.pem>]\n")),(0,a.kt)("p",null,"Use exist key"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Use specified private key file\n-key <key.pem>\n")),(0,a.kt)("h2",{id:"subject-options"},(0,a.kt)("inlineCode",{parentName:"h2"},"<subject options>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# <subject> = /C=<country>/ST=<state>/L=<city>/O=<organization>/OU=<section>/CN=<domain>/emailAddress=<email>\n[-subj "<subject>"]\n\n# <subjectAltName> = <DNS>|<IP>[,...]\n# <DNS> = DNS:example.com\n# <IP> = IP:10.0.0.1\n[-addext "subjectAltName=<subjectAltName>"]\n\n# Using config file\n[-config <config.ini>]\n')),(0,a.kt)("h2",{id:"creating-csr"},"Creating CSR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req\n    <key option>\n\n    # Create new CSR\n    -new\n    -out <request.csr>\n\n    <subject options>\n")),(0,a.kt)("h2",{id:"self-signed-certificate"},"Self signed certificate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req\n    <key option>\n\n    # Create self signed CRT (certificate) instead of CSR\n    -x509\n    -out <cert.pem>\n\n    # See X509\n    [<X509 options>]\n    [-set_serial <number>]\n    [-days <days>]\n    [...]\n\n    <subject options>\n")),(0,a.kt)("h2",{id:"csr-configuration-file"},"CSR configuration file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ini"},"[ req ]\n# <key length> = 2048 / 4096 / ...\ndefault_bits = <key length>\ndefault_keyfile = <key file>\ndistinguished_name = req_distinguished_name\nprompt = no\nencrypt_key = no\nreq_extensions = req_ext\n\n[ req_distinguished_name ]\n\n# C=\n# <country> = US | HK | TW | ...\n# ISO 3166-1 alpha-2\n# two-letter country codes\ncountryName = <country>\n\n# ST=\nstateOrProvinceName = <state>\n\n# L=\nlocalityName = <city>\n\n# O=\norganizationName = <company>\n# Multiple organization\n# 1.organizationName = <company>\n# 2.organizationName = <company>\n\n# OU=\norganizationalUnitName = <section / department>\n\n# CN=\n# For wildcard: *.example.com\ncommonName = <domain>\n\nemailAddress = <email>\n\n[ req_ext ]\n# Reference: https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html#Subject-Alternative-Name\n\n# subjectAltName=DNS:<domain>,DNS:<domain>...\n\n# same as\n\nsubjectAltName = @alt_section\n\n[ alt_section ]\nDNS.1 = <domain>\nDNS.2 = <domain>\n# ...\n")),(0,a.kt)("h2",{id:"generate-csr-from-an-existing-certificate"},"Generate CSR from an existing certificate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509\n  -in <cert.crt>\n  -signkey <key.pem>\n  -x509toreq\n  -out <cert.csr>\n")),(0,a.kt)("h2",{id:"verify-csr-signature"},"Verify CSR signature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -text -in <file.csr> -noout -verify\n")))}u.isMDXComponent=!0}}]);