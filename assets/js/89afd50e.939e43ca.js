"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5072],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,g=d["".concat(u,".").concat(m)]||d[m]||s[m]||l;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7011:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=t(3117),a=t(102),l=(t(7294),t(3905)),o=["components"],i={},u=void 0,c={unversionedId:"Programming/C-Sharp/Delegate",id:"Programming/C-Sharp/Delegate",title:"Delegate",description:"Delegate",source:"@site/docs/Programming/C-Sharp/Delegate.md",sourceDirName:"Programming/C-Sharp",slug:"/Programming/C-Sharp/Delegate",permalink:"/note/Programming/C-Sharp/Delegate",editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/C-Sharp/Delegate.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"Basic",permalink:"/note/Programming/C-Sharp/"},next:{title:"NameSpace",permalink:"/note/Programming/C-Sharp/NameSpace"}},p=[{value:"Delegate",id:"delegate",children:[],level:2},{value:"Lambda",id:"lambda",children:[],level:2}],s={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"delegate"},"Delegate"),(0,l.kt)("p",null,"A delegate is a type that represents references to methods with a particular parameter list and return type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"class Program\n{\n    // Declaration\n    public delegate int DelegateMethod(ref int x);\n\n    public static int Add1(ref int x)\n    {\n        x += 1;\n        return x;\n    }\n\n    public static int Multiple2(ref int x)\n    {\n        x *= 2;\n        return x;\n    }\n\n    static void Main(string[] args)\n    {\n        DelegateMethod calculate;\n        int x;\n\n        x = 1;\n        calculate = Add1;\n        calculate?.Invoke(ref x); // 1 + 1 = 2\n        Console.WriteLine(x); // 2\n\n        x = 1;\n        calculate += Multiple2; // Add other method\n        calculate?.Invoke(ref x); // (1 + 1) * 2 = 4\n        Console.WriteLine(x); // 4\n    }\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the delegate has a return value and/or out parameters, it returns the return value and parameters of the last method invoked. "),(0,l.kt)("li",{parentName:"ul"},"Delegate can bind to instance")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'class Counter\n{\n    public int count = 0;\n\n    public void Add()\n    {\n        count += 1;\n    }\n}\n\nclass Program\n{\n\n    // Declaration\n    public delegate void DelegateMethod();\n\n    static void Main(string[] args)\n    {\n        var a = new Counter();\n        var b = new Counter();\n\n        // Delegate does not need initialize, can be null\n        DelegateMethod method = null;\n\n        method = a.Add;\n        // Still can use += even delegate is null\n        // method += a.Add;\n\n        // Use ?.Invoke() will check if delegate is null, call null delegate() will throw error\n        method?.Invoke();\n        Console.WriteLine(a.count); // 1\n\n        method += b.Add;\n        method?.Invoke();\n        Console.WriteLine($"{a.count} {b.count}"); // 2 1\n    }\n}\n')),(0,l.kt)("p",null,"Anonymous"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"var delegateFunction = delegate()\n{\n    // ...\n    // return ...;\n};\n")),(0,l.kt)("p",null,"C# defined delegate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"public delegate void Action();\npublic delegate void Action<in T>(T obj);\n// ...\n\npublic delegate TResult Func<out TResult>();\npublic delegate TResult Func<in T, out TResult>(T arg);\n// ...\n")),(0,l.kt)("h2",{id:"lambda"},"Lambda"),(0,l.kt)("p",null,"With return value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"Func<int, int> Add1 = (n) => n + 1;\n// same as\nFunc<int, int> Add1 = (n) => { return n + 1; };\n")),(0,l.kt)("p",null,"Without return value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'Action<string> Hi = (name) =>\n{\n    Console.WriteLine($"Hi, {name}");\n};\n')))}d.isMDXComponent=!0}}]);