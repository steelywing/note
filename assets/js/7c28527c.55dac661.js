"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5191],{87485:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(76687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(n),u=i,k=s["".concat(p,".").concat(u)]||s[u]||c[u]||r;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},38852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(76274),i=(n(76687),n(87485));const r={},l="if",o={unversionedId:"Note/Nginx/if",id:"Note/Nginx/if",title:"if",description:"Nginx if implement is weird, see",source:"@site/docs/Note/Nginx/if.md",sourceDirName:"Note/Nginx",slug:"/Note/Nginx/if",permalink:"/note/Note/Nginx/if",draft:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Note/Nginx/if.md",tags:[],version:"current",frontMatter:{},sidebar:"note",previous:{title:"$host",permalink:"/note/Note/Nginx/host"},next:{title:"Microsoft Office",permalink:"/note/Note/Office/"}},p={},d=[{value:"Flow",id:"flow",level:2},{value:"Example",id:"example",level:3},{value:"Operator <code>and</code>",id:"operator-and",level:2}],m={toc:d};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"if"},(0,i.kt)("inlineCode",{parentName:"h1"},"if")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Nginx ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," implement is weird, see"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#internals"},"Internal Implementation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/"},"If is Evil")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-nginx"},'if ($args = "alice") {\n    # ...\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The left side must be variable ",(0,i.kt)("inlineCode",{parentName:"li"},"$..."))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Operator"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"''")," same as ",(0,i.kt)("inlineCode",{parentName:"td"},'""'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'""')," == ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"0"')," == ",(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"=")),(0,i.kt)("td",{parentName:"tr",align:null},"equal")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"!=")),(0,i.kt)("td",{parentName:"tr",align:null},"not equal")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"~")),(0,i.kt)("td",{parentName:"tr",align:null},"match RegExp (case-sensitive)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"~*")),(0,i.kt)("td",{parentName:"tr",align:null},"match RegExp (case-insensitive)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"!~")),(0,i.kt)("td",{parentName:"tr",align:null},"not match RegExp (case-sensitive)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"!~*")),(0,i.kt)("td",{parentName:"tr",align:null},"not match RegExp (case-insensitive)")))),(0,i.kt)("h2",{id:"flow"},"Flow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Only ",(0,i.kt)("inlineCode",{parentName:"li"},"ngx_http_rewrite_module")," directives (",(0,i.kt)("inlineCode",{parentName:"li"},"break"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"return"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"rewrite"),", ... ) execute as flow"),(0,i.kt)("li",{parentName:"ul"},"If ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," matched, Nginx change the context to the ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," block"),(0,i.kt)("li",{parentName:"ul"},"All support ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," context but not ",(0,i.kt)("inlineCode",{parentName:"li"},"ngx_http_rewrite_module")," directives (",(0,i.kt)("inlineCode",{parentName:"li"},"add_header"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"proxy_pass"),", ...), Nginx does not execute that, Nginx will only set context block as that")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Only ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Second 2")," header will be present in response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-nginx"},"location / {\n    # 1: if this location is matched, Nginx set the config block to `location /`\n\n    set $true 1;\n\n    if ($true) {\n        # 2: if matched, Nginx set the config block to this `if` block\n\n        # because add_header is not ngx_http_rewrite_module directive, Nginx does not execute add_header\n\n        add_header X-First 1;\n    }\n\n    if ($true) {\n        # 3: if matched, Nginx set the config block to this `if` block\n\n        # Finally, Nginx use this `if` block as final config block, so the response header only has `X-Second 2`\n\n        add_header X-Second 2;\n    }\n\n    return 204;\n}\n")),(0,i.kt)("h2",{id:"operator-and"},"Operator ",(0,i.kt)("inlineCode",{parentName:"h2"},"and")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Nginx change the context block when ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," matched (",(0,i.kt)("a",{parentName:"li",href:"https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/"},"If is evil"),")"),(0,i.kt)("li",{parentName:"ul"},"To avoid ",(0,i.kt)("inlineCode",{parentName:"li"},"if")," side effect, use ",(0,i.kt)("inlineCode",{parentName:"li"},"map")," if possible"))),(0,i.kt)("p",null,"Method 1"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Recommended"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-nginx"},'# if ($arg_a == "alice" && $arg_b == "bob")\n\nhttp {\n    map $arg_a $match_a {\n        default 0;\n        alice 1;\n    }\n    map $arg_b $match_b {\n        default 0;\n        bob 1;\n    }\n    map "$match_a$match_b" $match {\n        default 0;\n        11 1;\n    }\n\n    server {\n        if ($match) {\n            # ...\n        }\n        # ...\n    }\n}\n')),(0,i.kt)("p",null,"Method 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-nginx"},"set $and 1;\n\nif (<not condition>) {\n    set $and 0;\n}\n\nif (<not condition>) {\n    set $and 0;\n}\n\nif ($and) {\n    # ...\n}\n")),(0,i.kt)("p",null,"Method 3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-nginx"},'set $and ""\n\nif (<condition>) {\n    set $and "0";\n}\n\nif (<condition>) {\n    set $and "${and}1";\n}\n\nif ($and = "01") {\n    # ...\n}\n')))}c.isMDXComponent=!0}}]);