"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1315],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2061:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],o={},c=void 0,s={unversionedId:"Note/OpenSSL",id:"Note/OpenSSL",title:"OpenSSL",description:"File format",source:"@site/docs/Note/OpenSSL.md",sourceDirName:"Note",slug:"/Note/OpenSSL",permalink:"/note/Note/OpenSSL",editUrl:"https://github.com/steelywing/note/edit/master/docs/Note/OpenSSL.md",tags:[],version:"current",frontMatter:{},sidebar:"note",previous:{title:"Nginx",permalink:"/note/Note/Nginx"},next:{title:"RFID",permalink:"/note/Note/RFID"}},p=[{value:"File format",id:"file-format",children:[{value:"PEM (Privacy-Enhanced Mail)",id:"pem-privacy-enhanced-mail",children:[],level:3},{value:"PKCS #12 (<code>.p12</code>)",id:"pkcs-12-p12",children:[],level:3},{value:"Convert <code>.pem</code> to <code>.p12</code>",id:"convert-pem-to-p12",children:[],level:3}],level:2},{value:"Certificate signature",id:"certificate-signature",children:[],level:2},{value:"Option",id:"option",children:[],level:2},{value:"Version",id:"version",children:[],level:2},{value:"RSA key",id:"rsa-key",children:[],level:2},{value:"CSR (Certificate Signing Request)",id:"csr-certificate-signing-request",children:[],level:2},{value:"X509 (TLS/SSL certificate)",id:"x509-tlsssl-certificate",children:[],level:2},{value:"Full chain certificate",id:"full-chain-certificate",children:[],level:2},{value:"Test SSL/TLS connection",id:"test-ssltls-connection",children:[],level:2},{value:"Test SMTP / IMAP StartTLS",id:"test-smtp--imap-starttls",children:[],level:2},{value:"CA (Certificate Authority)",id:"ca-certificate-authority",children:[{value:"CA sign certificate",id:"ca-sign-certificate",children:[],level:3}],level:2},{value:"Revoke signed certificate",id:"revoke-signed-certificate",children:[{value:"CRL (Certificate Revocation List)",id:"crl-certificate-revocation-list",children:[],level:3}],level:2},{value:"Env",id:"env",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"file-format"},"File format"),(0,l.kt)("h3",{id:"pem-privacy-enhanced-mail"},"PEM (Privacy-Enhanced Mail)"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc1421"},"RFC 1421")),(0,l.kt)("p",null,"Use to store"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"X509 certificate (",(0,l.kt)("inlineCode",{parentName:"li"},".crt")," ",(0,l.kt)("inlineCode",{parentName:"li"},".pem"),")"),(0,l.kt)("li",{parentName:"ul"},"Public / private key (",(0,l.kt)("inlineCode",{parentName:"li"},".key")," ",(0,l.kt)("inlineCode",{parentName:"li"},".pem"),")"),(0,l.kt)("li",{parentName:"ul"},"Certificate signing request (",(0,l.kt)("inlineCode",{parentName:"li"},".csr")," ",(0,l.kt)("inlineCode",{parentName:"li"},".pem"),")")),(0,l.kt)("h3",{id:"pkcs-12-p12"},"PKCS #12 (",(0,l.kt)("inlineCode",{parentName:"h3"},".p12"),")"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7292"},"RFC 7292")),(0,l.kt)("p",null,"Bundle X509 full chain certificate, private key"),(0,l.kt)("h3",{id:"convert-pem-to-p12"},"Convert ",(0,l.kt)("inlineCode",{parentName:"h3"},".pem")," to ",(0,l.kt)("inlineCode",{parentName:"h3"},".p12")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.openssl.org/docs/manmaster/man1/openssl-pkcs12.html"},"Reference"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'openssl pkcs12 -export\n  -in <cert.{crt|pem}>\n  [-certfile <ca.crt>]\n  -inkey <private-key.pem>\n  -out <file.p12>\n  [-passout "pass:<password>"]\n  [-name "<name>"]\n')),(0,l.kt)("h2",{id:"certificate-signature"},"Certificate signature"),(0,l.kt)("p",null,"Certificate content"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Owner DN"),(0,l.kt)("li",{parentName:"ul"},"Owner public key"),(0,l.kt)("li",{parentName:"ul"},"CA DN"),(0,l.kt)("li",{parentName:"ul"},"CA signature (Append after signed)"),(0,l.kt)("li",{parentName:"ul"},"Certificate extensions")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Pseudo code\n// Content is excluded signature\nCASignature = encrypt(hash(Content), CAPrivateKey)\n")),(0,l.kt)("p",null,"Verify signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Pseudo code\n// Content is excluded signature\ndecrypt(CASignature, CAPublicKey) == hash(Content)\n")),(0,l.kt)("h2",{id:"option"},"Option"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-noout")),(0,l.kt)("td",{parentName:"tr",align:null},"Prevents output encoded data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-text")),(0,l.kt)("td",{parentName:"tr",align:null},"Print the data in text form")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-modulus")),(0,l.kt)("td",{parentName:"tr",align:null},"Print the modulus of public key")))),(0,l.kt)("h2",{id:"version"},"Version"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl version\n")),(0,l.kt)("h2",{id:"rsa-key"},"RSA key"),(0,l.kt)("p",null,"Generating RSA key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Default key lenght = 2048\nopenssl genrsa [-out <file.key>] [<key length>]\n")),(0,l.kt)("p",null,"View RSA key file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rsa -in <file.key> -text -noout\n")),(0,l.kt)("p",null,"Extracting RSA public key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl rsa -in <file.key> -pubout -out <public.key>\n")),(0,l.kt)("h2",{id:"csr-certificate-signing-request"},"CSR (Certificate Signing Request)"),(0,l.kt)("blockquote",null,(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.digicert.com/ssl-support/openssl-quick-reference-guide.htm"},"Reference")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/man1/openssl-req.html"},"openssl req")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc2986"},"RFC 2986")))),(0,l.kt)("p",null,"Creating CSR"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req \\\n  -x509 \\\n  -new \\\n  # The new created private key\n  -keyout <key.pem>\n  -days <days>\n  -out <cert.{crt|pem}>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'openssl req -new \n  {\n    # Create new private key, bits = 2048 / 4096\n    -newkey rsa[:<bits>]\n      # Don\'t encrypt private key (no password)\n      [-nodes]\n      # The new created private key\n      [-keyout <key.pem>] |\n    # Use specified private key\n    -key <key.pem>\n  }\n  [\n    # Output a CRT (certificate) instead of CSR\n    -x509\n    # See X509\n    [<X509 options>]\n    [-set_serial <number>]\n    [-days <days>]\n    [...]\n  ]\n  -out <request.csr>\n  # <subject> = "/C=<country>/ST=<state>/L=<city>/O=<organization>/OU=<section>/CN=<domain>/emailAddress=<email>"\n  [-subj <subject>]\n  [-config <config.ini>]\n')),(0,l.kt)("p",null,"CSR configuration file ",(0,l.kt)("inlineCode",{parentName:"p"},".ini")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"[ req ]\n# <key length> = 2048 / 4096 / ...\ndefault_bits = <key length>\ndefault_keyfile = <key file>\ndistinguished_name = req_distinguished_name\nprompt = no\nencrypt_key = no\nreq_extensions = req_ext\n\n[ req_distinguished_name ]\n\n# C=\n# <country> = US | HK | TW | ...\n# ISO 3166-1 alpha-2\n# two-letter country codes\ncountryName = <country>\n\n# ST=\nstateOrProvinceName = <state>\n\n# L=\nlocalityName = <city>\n\n# O=\norganizationName = <company>\n# Multiple organization\n# 1.organizationName = <company>\n# 2.organizationName = <company>\n\n# OU=\norganizationalUnitName = <section / department>\n\n# CN=\n# For wildcard: *.example.com\ncommonName = <domain>\n\nemailAddress = <email>\n\n[ req_ext ]\n# Reference: https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html#Subject-Alternative-Name\n\n# subjectAltName=DNS:<domain>,DNS:<domain>...\n\n# same as\n\nsubjectAltName = @alt_section\n\n[ alt_section ]\nDNS.1 = <domain>\nDNS.2 = <domain>\n# ...\n")),(0,l.kt)("p",null,"Verify CSR signature"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl req -text -in <file.csr> -noout -verify\n")),(0,l.kt)("h2",{id:"x509-tlsssl-certificate"},"X509 (TLS/SSL certificate)"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.openssl.org/docs/man1.1.1/man1/x509.html"},"Reference"))),(0,l.kt)("p",null,"Certificate display and signing"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#csr-certificate-signing-request"},"Self signed certificate with new key")),(0,l.kt)("p",null,"Self signed certificate using existing key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 \n    # By default input is CRT (certificate)\n    # Use CSR as input\n    -req\n    -in <request.csr> \n    -days <days>\n    # Private key use for signing\n    -signkey <key.pem> \n    -out <cert.{crt|pem}> \n")),(0,l.kt)("p",null,"CA (Certificate Authority) sign certificate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 \n    -req \n    -in <request.csr> \n    -days <days> \n    -CA <ca.crt> \n    # CA private key\n    -CAkey <ca.key> \n    {\n      # Create new serial number file\n      -CAcreateserial |\n      # Specify serial number file, `$(basename <ca.crt> .crt).srl` by default\n      -CAserial <filename> |\n      # Specify serial number, Decimal 01 02..., Hex 0x1 0x2...\n      -set_serial <serial>\n    } \n    -out <cert.{crt|pem}>\n")),(0,l.kt)("p",null,"Display the contents of certificate (",(0,l.kt)("inlineCode",{parentName:"p"},".crt"),")"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-dates")),(0,l.kt)("td",{parentName:"tr",align:null},"Print the start and expiry dates")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -in <cert.{crt|pem}> [-dates] -text -noout\n")),(0,l.kt)("p",null,"Verify if a private key matches a certificate"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://www.ibm.com/support/pages/how-verify-if-private-key-matches-certificate"},"Reference"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl x509 -noout -modulus -in <cert.crt> | openssl md5\nopenssl rsa -noout -modulus -in <private-key.pem> | openssl md5\nopenssl req -noout -modulus -in <csr.pem> | openssl md5\n")),(0,l.kt)("h2",{id:"full-chain-certificate"},"Full chain certificate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CA = Chain")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"cat <cert.crt> <chain.crt> > <fullchain.crt>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"}," -----BEGIN CERTIFICATE-----\ncert.crt\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nCA.crt\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nTrustedRoot.crt\n-----END CERTIFICATE----- \n")),(0,l.kt)("h2",{id:"test-ssltls-connection"},"Test SSL/TLS connection"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Protocol"),(0,l.kt)("th",{parentName:"tr",align:null},"Port"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HTTPS"),(0,l.kt)("td",{parentName:"tr",align:null},"443")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"IMAPS"),(0,l.kt)("td",{parentName:"tr",align:null},"993")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"IMAP STARTTLS"),(0,l.kt)("td",{parentName:"tr",align:null},"143")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"POP3S"),(0,l.kt)("td",{parentName:"tr",align:null},"995")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SMTPS"),(0,l.kt)("td",{parentName:"tr",align:null},"465")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SMTP STARTTLS"),(0,l.kt)("td",{parentName:"tr",align:null},"587")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Option"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"-showcerts")),(0,l.kt)("td",{parentName:"tr",align:null},"Show full chain certificate")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl s_client [-showcerts] -connect <host>:<port>\n")),(0,l.kt)("p",null,"Show SSL certificate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl s_client -connect <host>:<port> | openssl x509 [-noout] [-text]\n")),(0,l.kt)("h2",{id:"test-smtp--imap-starttls"},"Test SMTP / IMAP StartTLS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl s_client -starttls { smtp | imap | pop3 } -showcerts -connect <host>:<port> -servername <domain>\n")),(0,l.kt)("h2",{id:"ca-certificate-authority"},"CA (Certificate Authority)"),(0,l.kt)("blockquote",null,(0,l.kt)("ul",{parentName:"blockquote"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/man1/openssl-ca.html"},"Reference")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.openssl.org/docs/manmaster/man5/x509v3_config.html"},"X509 V3")))),(0,l.kt)("p",null,"Config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-properties"},"[ ca ]\ndefault_ca      = CA_default\n\n[ CA_default ]\n\ndir             = .\ndatabase        = $dir/database.txt\nnew_certs_dir   = $dir/new_certs\nunique_subject  = no\n\ncertificate     = $dir/ca.crt\nserial          = $dir/ca.srl\n# rand_serial     = yes\nprivate_key     = $dir/private/ca.key\nRANDFILE        = $dir/private/.rand\n\ndefault_days    = 365000\ndefault_crl_days= 365000\ndefault_md      = sha256\n\npolicy          = policy_any\nemail_in_dn     = no\n\n# Subject name display option\nname_opt        = ca_default\n# Certificate display option\ncert_opt        = ca_default\ncopy_extensions = copy\n\nx509_extensions = extensions\ncrl_extensions  = crl_exts\n\n[ policy_any ]\ncountryName             = optional\nstateOrProvinceName     = optional\nlocalityName            = optional\norganizationName        = supplied\norganizationalUnitName  = optional\ncommonName              = supplied\nemailAddress            = optional\n\n[ extensions ]\n# CA certificate\n# basicConstraints        = critical, CA:TRUE\n# basicConstraints        = critical, CA:TRUE, pathlen:1\n\n# End-user certificate\nbasicConstraints        = CA:FALSE\n\nsubjectKeyIdentifier    = hash\nauthorityKeyIdentifier  = keyid:always, issuer:always\nissuerAltName           = issuer:copy\ncrlDistributionPoints   = URI:http://example.com/ca.crl\n\n[ crl_exts ]\nauthorityKeyIdentifier = keyid:always,issuer:always\n")),(0,l.kt)("h3",{id:"ca-sign-certificate"},"CA sign certificate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl ca\n  [-batch] # No prompt\n  [-config <ca.conf>]\n  -in <request.csr>\n  -out <cert.{crt|pem}>\n")),(0,l.kt)("h2",{id:"revoke-signed-certificate"},"Revoke signed certificate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl ca\n  [-config <ca.conf>]\n  -revoke <cert.{crt|pem}>\n")),(0,l.kt)("h3",{id:"crl-certificate-revocation-list"},"CRL (Certificate Revocation List)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl ca -gencrl\n  [-config <ca.conf>]\n  -out <revoked.crl>\n")),(0,l.kt)("h2",{id:"env"},"Env"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"OPENSSL_CONF=<openssl.cnf>\n")),(0,l.kt)("p",null,"Same as"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"openssl ... -config <openssl.cnf>\n")))}m.isMDXComponent=!0}}]);