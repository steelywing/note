"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1734],{7485:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>k});var n=r(6687);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(r),k=a,m=s["".concat(p,".").concat(k)]||s[k]||d[k]||o;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},6459:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(6274),a=(r(6687),r(7485));const o={},l="STP",i={unversionedId:"Network/Cisco IOS/STP",id:"Network/Cisco IOS/STP",title:"STP",description:"Spanning Tree Protocol",source:"@site/docs/Network/Cisco IOS/STP.md",sourceDirName:"Network/Cisco IOS",slug:"/Network/Cisco IOS/STP",permalink:"/note/Network/Cisco IOS/STP",draft:!1,editUrl:"https://github.com/steelywing/note/edit/master/docs/Network/Cisco IOS/STP.md",tags:[],version:"current",frontMatter:{},sidebar:"network",previous:{title:"SPAN",permalink:"/note/Network/Cisco IOS/SPAN"},next:{title:"DNS",permalink:"/note/Network/DNS/"}},p={},u=[{value:"STP mode",id:"stp-mode",level:2},{value:"Root guard",id:"root-guard",level:2},{value:"Loop guard",id:"loop-guard",level:2},{value:"Port fast",id:"port-fast",level:2},{value:"BPDU guard",id:"bpdu-guard",level:2},{value:"BPDU filter",id:"bpdu-filter",level:2}],c={toc:u};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"stp"},"STP"),(0,a.kt)("p",null,"Spanning Tree Protocol"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Spanning_Tree_Protocol"},"Wiki Reference"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://www.alliedtelesis.com/sites/default/files/documents/how-alliedware-plus/howto_aw-_config_pvst_interop_cisco_revb.pdf"},"AlliedWare Reference"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"STP (Spanning Tree Protocol) / CST (Common Spanning Tree)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"IEEE 802.1D"))),(0,a.kt)("li",{parentName:"ul"},"RSTP (Rapid Spanning Tree Protocol)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"IEEE 802.1w"),(0,a.kt)("li",{parentName:"ul"},"Compatible with CST"))),(0,a.kt)("li",{parentName:"ul"},"MSTP (Multiple Spanning Tree Protocol)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"IEEE 802.1s, IEEE 802.1Q-2005"))),(0,a.kt)("li",{parentName:"ul"},"PVST (Per-VLAN Spanning Tree)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Cisco proprietary protocol"),(0,a.kt)("li",{parentName:"ul"},"PVST = CST BPDU on native VLAN + SSTP per VLAN"))),(0,a.kt)("li",{parentName:"ul"},"Rapid-PVST",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Cisco proprietary protocol"),(0,a.kt)("li",{parentName:"ul"},"Compatible with PVST"),(0,a.kt)("li",{parentName:"ul"},"PVST = RSTP BPDU on native VLAN + SSTP per VLAN")))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Port role"),(0,a.kt)("th",{parentName:"tr",align:null},"Forward BPDU"),(0,a.kt)("th",{parentName:"tr",align:null},"Forward frame"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Root"),(0,a.kt)("td",{parentName:"tr",align:null},"X"),(0,a.kt)("td",{parentName:"tr",align:null},"O")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Blocked / Alternate"),(0,a.kt)("td",{parentName:"tr",align:null},"X"),(0,a.kt)("td",{parentName:"tr",align:null},"X")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Designated"),(0,a.kt)("td",{parentName:"tr",align:null},"O"),(0,a.kt)("td",{parentName:"tr",align:null},"O")))),(0,a.kt)("h2",{id:"stp-mode"},"STP mode"),(0,a.kt)("p",null,"Recommended: Rapid-PVST"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config)# spanning-tree mode { pvst | rapid-pvst | mst }\n")),(0,a.kt)("h2",{id:"root-guard"},"Root guard"),(0,a.kt)("p",null,"If a root guard enabled port receives superior STP BPDU, root guard moves this port to a root-inconsistent (listening) state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config-if)# spanning-tree guard root\n")),(0,a.kt)("h2",{id:"loop-guard"},"Loop guard"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("a",{parentName:"p",href:"https://www.cisco.com/c/en/us/support/docs/lan-switching/spanning-tree-protocol/10596-84.html"},"Reference"))),(0,a.kt)("p",null,"If a non-designated port no longer receive STP BPDU, the port transitions into loop-inconsistent (blocking) state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config-if)# spanning-tree guard loop\n")),(0,a.kt)("p",null,"Enable loop guard on all port"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config)# spanning-tree loopguard default\n")),(0,a.kt)("h2",{id:"port-fast"},"Port fast"),(0,a.kt)("p",null,"Immediately brings interface to the forwarding state from a blocking state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config-if)# spanning-tree portfast [disable]\n")),(0,a.kt)("p",null,"Enable port fast on all access port"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config)# spanning-tree portfast default\n")),(0,a.kt)("h2",{id:"bpdu-guard"},"BPDU guard"),(0,a.kt)("p",null,"If BPDU is detected on the port, the port will be ",(0,a.kt)("inlineCode",{parentName:"p"},"err-disable"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config-if)# spanning-tree bpduguard { enable | disable }\n")),(0,a.kt)("p",null,"Enable BPDU guard on all port fast port"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config)# spanning-tree portfast bpduguard default\n")),(0,a.kt)("h2",{id:"bpdu-filter"},"BPDU filter"),(0,a.kt)("p",null,"Ignore BPDU"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Switch(config-if)# spanning-tree bpdufilter { enable | disable }\n")))}d.isMDXComponent=!0}}]);