"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5720],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return k}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(t),k=r,d=m["".concat(s,".").concat(k)]||m[k]||p[k]||i;return t?a.createElement(d,l(l({ref:n},u),{},{components:t})):a.createElement(d,l({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9461:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var a=t(3117),r=t(102),i=(t(7294),t(3905)),l=["components"],o={},s="Async / Task",c={unversionedId:"Programming/C-Sharp/Async",id:"Programming/C-Sharp/Async",title:"Async / Task",description:"- Call async method will return a Task / Task, `` is return value type",source:"@site/docs/Programming/C-Sharp/Async.md",sourceDirName:"Programming/C-Sharp",slug:"/Programming/C-Sharp/Async",permalink:"/note/Programming/C-Sharp/Async",editUrl:"https://github.com/steelywing/note/edit/master/docs/Programming/C-Sharp/Async.md",tags:[],version:"current",frontMatter:{},sidebar:"programming",previous:{title:"Basic",permalink:"/note/Programming/C-Sharp/"},next:{title:"Delegate",permalink:"/note/Programming/C-Sharp/Delegate"}},u=[{value:"Run sync method in <code>async</code>",id:"run-sync-method-in-async",children:[],level:2},{value:"Task",id:"task",children:[],level:2},{value:"Cancellation Token",id:"cancellation-token",children:[{value:"Cancel after a time",id:"cancel-after-a-time",children:[],level:3}],level:2}],p={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"async--task"},"Async / Task"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call ",(0,i.kt)("inlineCode",{parentName:"li"},"async")," method will return a ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"Task<T>"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"<T>")," is return value type",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Task")," == JavaScript ",(0,i.kt)("inlineCode",{parentName:"li"},"Promise")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"async")," method run in new thread"))),(0,i.kt)("li",{parentName:"ul"},"C# ",(0,i.kt)("inlineCode",{parentName:"li"},"async")," method must include ",(0,i.kt)("inlineCode",{parentName:"li"},"await"),", otherwise will run sync"),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Task.Delay(<ms>)")," to create a delay task"),(0,i.kt)("li",{parentName:"ul"},"Call ",(0,i.kt)("inlineCode",{parentName:"li"},"await <Task>")," to wait the ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," return result"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Task.CurrentId")," == Current task ID"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Task.Run()")," will create new thread"),(0,i.kt)("li",{parentName:"ul"},"Call ",(0,i.kt)("inlineCode",{parentName:"li"},"async")," method does not create new thread (like ",(0,i.kt)("inlineCode",{parentName:"li"},"yield"),")")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'async static Task<int> AddAsync(int x, int y)\n{\n    Console.WriteLine("Task Start");\n    await Task.Delay(3000);\n    Console.WriteLine("Task End");\n    return x + y;\n}\n\nvar task = AddAsync(1, 2);\nThread.Sleep(1000);\nConsole.WriteLine("Main");\nConsole.WriteLine("Result = " + await task);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Task Start\n# ~ 1000ms\nMain\n# ~ 2000ms\nTask End\nResult = 3\n")),(0,i.kt)("h2",{id:"run-sync-method-in-async"},"Run sync method in ",(0,i.kt)("inlineCode",{parentName:"h2"},"async")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'int x = 1;\n// Task.Factory.StartNew(...);\n// same as\nvar task = Task.Run(() =>\n{\n    Console.WriteLine("Start");\n    Thread.Sleep(2000);\n    Console.WriteLine("End");\n    return x * 2;\n});\n\nThread.Sleep(1000);\nConsole.WriteLine("Waiting Task");\nConsole.WriteLine(await task);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Start\n# ~ 1000ms\nWaiting Task\n# ~ 1000ms\nEnd\nResult\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Task.Run()")," can have return value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Task.Run()")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Func")," can not have parameter")),(0,i.kt)("h2",{id:"task"},"Task"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'// Create a task but do not start it\nvar task = new Task(() => "Task");\n\n// Start task\ntask.Start();\n\n// Wait the task finish\ntask.Wait();\n\n// Wait the task 1000ms, return true if finish\nvar finished = task.Wait(1000);\n')),(0,i.kt)("h2",{id:"cancellation-token"},"Cancellation Token"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CancellationToken")," is like a ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),", let ",(0,i.kt)("inlineCode",{parentName:"li"},"asyn")," method to know if cancellation requested"),(0,i.kt)("li",{parentName:"ul"},"Cancellation request need to be set using ",(0,i.kt)("inlineCode",{parentName:"li"},"CancellationTokenSource.Cancel()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"CancellationToken")," cannot request cancellation"),(0,i.kt)("li",{parentName:"ul"},"Most of C# ",(0,i.kt)("inlineCode",{parentName:"li"},"async")," method support"),(0,i.kt)("li",{parentName:"ul"},"You need handle ",(0,i.kt)("inlineCode",{parentName:"li"},"CancellationToken")," by yourself in your method")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'async static Task LoopAsync(int seconds, CancellationToken ct)\n{\n    for (int i = 0; i < seconds; i += 1)\n    {\n        if (ct.IsCancellationRequested)\n            break;\n        Console.WriteLine($"Loop {i}");\n        await Task.Delay(1000, ct);\n    }\n}\n\nvar cts = new CancellationTokenSource();\n\n// Loop 100 seconds\nvar task = LoopAsync(100, cts.Token);\n\nThread.Sleep(10 * 1000);\n// Cancel after 10 seconds\ncts.Cancel();\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Loop 0\nLoop 1\nLoop 2\nLoop 3\nLoop 4\nLoop 5\nLoop 6\nLoop 7\nLoop 8\nLoop 9\n")),(0,i.kt)("h3",{id:"cancel-after-a-time"},"Cancel after a time"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"var cts = new CancellationTokenSource();\ncts.\n")))}m.isMDXComponent=!0}}]);